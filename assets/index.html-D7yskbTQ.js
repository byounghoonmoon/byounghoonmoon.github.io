import{_ as r,c as d,b as i,a as s,d as a,w as e,r as p,o as u,e as l}from"./app-Bo0Dj4y2.js";const c={};function g(m,n){const t=p("RouteLink"),o=p("Mermaid");return u(),d("div",null,[n[23]||(n[23]=i('<h1 id="🍃-spring-framework" tabindex="-1"><a class="header-anchor" href="#🍃-spring-framework"><span>🍃 Spring Framework</span></a></h1><p><strong>10년+ 실무 경험을 바탕으로 한 Spring 생태계 완전 정복</strong></p><p>금융권 시스템부터 전사 표준 템플릿까지, 다양한 프로젝트에서 축적한 Spring Framework 전문 지식을 정리합니다.</p><h2 id="📋-실무-경험-기반-목차" tabindex="-1"><a class="header-anchor" href="#📋-실무-경험-기반-목차"><span>📋 실무 경험 기반 목차</span></a></h2><h3 id="🏗️-spring-core-아키텍처-설계" tabindex="-1"><a class="header-anchor" href="#🏗️-spring-core-아키텍처-설계"><span>🏗️ Spring Core &amp; 아키텍처 설계</span></a></h3>',5)),s("ul",null,[s("li",null,[a(t,{to:"/notes/spring/ioc-di-production.html"},{default:e(()=>n[0]||(n[0]=[l("IoC/DI 실무 패턴과 함정들")])),_:1,__:[0]})]),s("li",null,[a(t,{to:"/notes/spring/bean-lifecycle-optimization.html"},{default:e(()=>n[1]||(n[1]=[l("Bean 생명주기 관리와 성능 최적화")])),_:1,__:[1]})]),s("li",null,[a(t,{to:"/notes/spring/aop-cross-cutting.html"},{default:e(()=>n[2]||(n[2]=[l("AOP를 활용한 횡단 관심사 처리")])),_:1,__:[2]})]),s("li",null,[a(t,{to:"/notes/spring/spring-configuration-strategy.html"},{default:e(()=>n[3]||(n[3]=[l("Spring 설정 전략: 환경별 구성 관리")])),_:1,__:[3]})])]),n[24]||(n[24]=s("h3",{id:"🚀-spring-boot-실전-활용",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🚀-spring-boot-실전-활용"},[s("span",null,"🚀 Spring Boot 실전 활용")])],-1)),s("ul",null,[s("li",null,[a(t,{to:"/notes/spring/spring-boot-template.html"},{default:e(()=>n[4]||(n[4]=[l("표준 템플릿 설계: 개발 생산성 25% 향상 비법")])),_:1,__:[4]})]),s("li",null,[a(t,{to:"/notes/spring/common-module-design.html"},{default:e(()=>n[5]||(n[5]=[l("공통 모듈 설계와 코드 재사용률 40% 달성")])),_:1,__:[5]})]),s("li",null,[a(t,{to:"/notes/spring/custom-auto-configuration.html"},{default:e(()=>n[6]||(n[6]=[l("Auto Configuration 커스터마이징")])),_:1,__:[6]})]),s("li",null,[a(t,{to:"/notes/spring/spring-boot-3-migration.html"},{default:e(()=>n[7]||(n[7]=[l("Spring Boot 3.0 마이그레이션 가이드")])),_:1,__:[7]})]),s("li",null,[a(t,{to:"/notes/spring/actuator-monitoring.html"},{default:e(()=>n[8]||(n[8]=[l("Actuator를 활용한 운영 모니터링")])),_:1,__:[8]})])]),n[25]||(n[25]=s("h3",{id:"🌐-spring-cloud-msa",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🌐-spring-cloud-msa"},[s("span",null,"🌐 Spring Cloud & MSA")])],-1)),s("ul",null,[s("li",null,[a(t,{to:"/notes/spring/financial-msa-architecture.html"},{default:e(()=>n[9]||(n[9]=[l("금융권 MSA 아키텍처 설계 경험")])),_:1,__:[9]})]),s("li",null,[a(t,{to:"/notes/spring/gateway-comparison.html"},{default:e(()=>n[10]||(n[10]=[l("Spring Cloud Gateway vs Zuul 실전 비교")])),_:1,__:[10]})]),s("li",null,[a(t,{to:"/notes/spring/eureka-production.html"},{default:e(()=>n[11]||(n[11]=[l("Eureka Service Discovery 운영 노하우")])),_:1,__:[11]})]),s("li",null,[a(t,{to:"/notes/spring/config-server-centralization.html"},{default:e(()=>n[12]||(n[12]=[l("Config Server를 통한 설정 중앙화")])),_:1,__:[12]})]),s("li",null,[a(t,{to:"/notes/spring/circuit-breaker-pattern.html"},{default:e(()=>n[13]||(n[13]=[l("Circuit Breaker 패턴으로 장애 전파 방지")])),_:1,__:[13]})])]),n[26]||(n[26]=s("h3",{id:"🔐-spring-security-심화",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🔐-spring-security-심화"},[s("span",null,"🔐 Spring Security 심화")])],-1)),s("ul",null,[s("li",null,[a(t,{to:"/notes/spring/multi-auth-system.html"},{default:e(()=>n[14]||(n[14]=[l("다중 인증 시스템 설계: 전략 패턴 활용")])),_:1,__:[14]})]),s("li",null,[a(t,{to:"/notes/spring/jwt-security-enhancement.html"},{default:e(()=>n[15]||(n[15]=[l("JWT 토큰 관리와 보안 강화")])),_:1,__:[15]})]),s("li",null,[a(t,{to:"/notes/spring/ldap-authentication.html"},{default:e(()=>n[16]||(n[16]=[l("LDAP 연동 인증 시스템 구축")])),_:1,__:[16]})]),s("li",null,[a(t,{to:"/notes/spring/method-security.html"},{default:e(()=>n[17]||(n[17]=[l("Method Security를 통한 세밀한 권한 제어")])),_:1,__:[17]})]),s("li",null,[a(t,{to:"/notes/spring/oauth2-biometric.html"},{default:e(()=>n[18]||(n[18]=[l("OAuth2와 생체인증 연동 경험")])),_:1,__:[18]})])]),n[27]||(n[27]=s("h3",{id:"📊-spring-data-성능-최적화",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#📊-spring-data-성능-최적화"},[s("span",null,"📊 Spring Data & 성능 최적화")])],-1)),s("ul",null,[s("li",null,[a(t,{to:"/notes/spring/jpa-performance-tuning.html"},{default:e(()=>n[19]||(n[19]=[l("JPA 성능 튜닝: N+1 문제 완전 정복")])),_:1,__:[19]})]),s("li",null,[a(t,{to:"/notes/spring/bulk-data-processing.html"},{default:e(()=>n[20]||(n[20]=[l("대용량 데이터 처리: 배치 최적화")])),_:1,__:[20]})]),s("li",null,[a(t,{to:"/notes/spring/connection-pool-optimization.html"},{default:e(()=>n[21]||(n[21]=[l("커넥션 풀 최적화로 성능 83% 개선")])),_:1,__:[21]})]),s("li",null,[a(t,{to:"/notes/spring/transaction-management.html"},{default:e(()=>n[22]||(n[22]=[l("트랜잭션 관리 전략과 격리 수준")])),_:1,__:[22]})])]),n[28]||(n[28]=s("h2",{id:"🏗️-실무-프로젝트별-spring-활용-경험",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🏗️-실무-프로젝트별-spring-활용-경험"},[s("span",null,"🏗️ 실무 프로젝트별 Spring 활용 경험")])],-1)),a(o,{code:"eJx1Ul1PGkEUfedX3KQhPPQjsoIib7DqU01NbHxfZbQbYccsa1tjTFRWQ/goaQIpmsViQjGNmxREGprY9L/0kZlJ+hM6uzKuujAP8zDnnHvPPXeCwT1VU4047AUAQsY7lEGhOITWlCwKvbh/WlV0VVlLoyzHHCJ/39bVjKLvyjiNdUfxTFqIJaOzrsiD36KPhkfZcM8TShLrKaR7pDCKbkQkQUqrGvKwiJxYjE4JLIvWsZZ6ZCIWlmdjEUEwkG6oj3A5tjAjzwl8TVnf2tTxjpYaYy+jqFpya3NiX4GNbynQRHR+JjEb4uB+YH8/GAwEDDWDnKlcvqEaaQT/vpZzsMLz0DZhUVcy6APWt4Bc5mmhxcwO0C82bdZcgXtJU+Hpl/yKQpxrS12hpefHxB4MBx2X5Z04sIrNcnlatJyKxxbQ6ysY9m36867qQ+qo1tKqDM9haTepGGrWR+I9SM/pBKTYopcH/p7C6IxjNMYlf88ugJpdUvgGtG/R5iE7rfrqvp5PLENsOiiYw45FzaaPJmNNQ+uGijVYxjjtReVjkmZ+2O3wwcEbntUPafFpUeF3jvuVwm6wZwewtJIAWjPZEReWWWEwKa0kxgbQpkm+3wCpmHwRk5hyGu+kgOYaLGcNe6bfMB+lccMObXLBR7fIL5O75nG0/OSRZUlyLEdcy59+APts0dYBDxdI2yZlf8bDXp+d9IFVS+T8ilVuJ32EefT+zXYWWKnkGKqapHFLG/4E+IpIxwL+8ZyeYxcmjN7918qJkxQ9soEvw3HR/jNugSIxN9rpV1OOiJ3WHxJ4ivSow78KSNGgb60cF5uj1/VRLrxKjbR/B/4DJRbAHw=="}),n[29]||(n[29]=i('<h2 id="📊-실무에서-검증된-spring-패턴" tabindex="-1"><a class="header-anchor" href="#📊-실무에서-검증된-spring-패턴"><span>📊 실무에서 검증된 Spring 패턴</span></a></h2><h3 id="성능-최적화-경험" tabindex="-1"><a class="header-anchor" href="#성능-최적화-경험"><span>성능 최적화 경험</span></a></h3><table><thead><tr><th>최적화 영역</th><th>Before</th><th>After</th><th>개선률</th><th>적용 기술</th></tr></thead><tbody><tr><td>LDAP 프로비저닝</td><td>3초/건</td><td>0.5초/건</td><td><strong>83%</strong></td><td>Connection Pool</td></tr><tr><td>빌드 파이프라인</td><td>25분</td><td>5분</td><td><strong>80%</strong></td><td>캐싱 전략</td></tr><tr><td>프로젝트 초기화</td><td>2주</td><td>1주</td><td><strong>50%</strong></td><td>표준 템플릿</td></tr><tr><td>코드 재사용률</td><td>-</td><td>40%↑</td><td><strong>40%</strong></td><td>공통 모듈</td></tr></tbody></table><h3 id="아키텍처-패턴-적용-경험" tabindex="-1"><a class="header-anchor" href="#아키텍처-패턴-적용-경험"><span>아키텍처 패턴 적용 경험</span></a></h3>',4)),a(o,{code:"eJyFVEFP20gUvudXPGWV5QK7ISEBolWlOI5Lxe4JtJeqB8eZJFbcGNmmLWqRyNaLusAKIsi2iRJqVgGWFYdUJLup1P6ZHjNjtT+hM2ObhIi2c7H9vfe+ed/3xhOJPFUrqpWCpyGAKauEHqKpFEzlZBNNTV9Dv8qGKuc0ZNIYS6T4mqE+lI2NjK7pBqv4bnZxPinGeNEovIqeWKOUAl8TKYJu5JExSoqKc/Pp2SBJUytoFIvNLialeBAzkaJX8jeaSM4JCSkZJFjIsNQbcUEQs5IQxHOyUi4a+nolf0t7irZuUgKhXOTBbFyKSeJkkPd+i3yUL6Kf5RzShFu3oEmboc3NSCQUKmj6Y6UkGxasirzWXM8VDXmtBCvL98OfXu//TV8g830GiGOT3y7BrbVIZyv8gCezlVcNpFiqXoFV4RpMs9rDJgyv+u52H3D7HWn38GAPv77EZ5c/5Ywf75D3R/iwBeT4ktKS5gU+dWAuGvmwXRsjF+6HPzQbHwf7/r5A7A5x6pzAPbLxSYs4bXdnAKT3Yjjouo0jSDCOwzGODO9lB/C//+DdF67dxedVr4Nmj7yqwrC7RXZbxH4DbqOOr3p+Kark+XPClSXuyhmQXcettzxhtBP4ZSX9LVNEVnr0J6wg45GqIBBVU9EfIWODd4P3G8SpUoEt/NYmOx1wnx+Q53+MkWZ5/Tlk9EpBLXIaZHhKOjVSb1D1+IA6yi2CYW+LWh1+4AlgS2JmnkBGNZR11QLBQHI5IDg+JXWHzdjd2wPcvSDnwYxv92GZu7r/ko1m+KZH96SjJk6LnHTd+gWQ9oCctb9lyF0u6ADwbocq8ItYE/i47424UaedsQnhnVNqN9M2vLLHePk4ajTlvz0W90R7kuwB7m7xIqc2/P8dfbTIX8F02brHt7cp6YD8/grcao8eT+r82BEZXjnseDQvvn480jDzw8ydZ2FybtMhhJ+B9y8JAexUKQWFsxzO+LCnjsISh8UA3u5TCyl8l8PZgORllx4RCi9xWArgPv0Fqt6u90YdKZpsmiIqgFlesTY0BAVV01L+NTJtWoZeRin/1vA/Zx6reauUiq89mVbYjZXy78IJvtINvgUpkV245pvLpKVE9It8sey8GI/d5Csr43ySJMWzAQH7XFyIfpkvm0zMRqMTotl95YseB5eCzsfA5Uywfegzagt3Eg=="}),n[30]||(n[30]=i(`<h2 id="🔧-실무-개발-가이드" tabindex="-1"><a class="header-anchor" href="#🔧-실무-개발-가이드"><span>🔧 실무 개발 가이드</span></a></h2><h3 id="_1-프로젝트-초기-설정-체크리스트" tabindex="-1"><a class="header-anchor" href="#_1-프로젝트-초기-설정-체크리스트"><span>1. 프로젝트 초기 설정 체크리스트</span></a></h3><ul><li>[ ] <strong>환경별 프로파일 구성</strong> (dev, test, prod)</li><li>[ ] <strong>로깅 전략 수립</strong> (ELK 스택 연동 고려)</li><li>[ ] <strong>DB 커넥션 풀 최적화</strong> (HikariCP 설정)</li><li>[ ] <strong>보안 설정</strong> (Spring Security 기본 구성)</li><li>[ ] <strong>모니터링 설정</strong> (Actuator + Micrometer)</li></ul><h3 id="_2-공통-라이브러리-필수-요소" tabindex="-1"><a class="header-anchor" href="#_2-공통-라이브러리-필수-요소"><span>2. 공통 라이브러리 필수 요소</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// 실제 SK C&amp;C 프로젝트에서 사용한 패턴</span></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">CommonProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonAutoConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@ConditionalOnMissingBean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">AuthenticationService</span> <span class="token function">authService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAuthenticationService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">LoggingAspect</span> <span class="token function">loggingAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoggingAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-msa-환경-필수-구성" tabindex="-1"><a class="header-anchor" href="#_3-msa-환경-필수-구성"><span>3. MSA 환경 필수 구성</span></a></h3><table><thead><tr><th>컴포넌트</th><th>용도</th><th>실무 노하우</th></tr></thead><tbody><tr><td><strong>Eureka Server</strong></td><td>Service Discovery</td><td>클러스터 구성 필수</td></tr><tr><td><strong>Config Server</strong></td><td>중앙 설정 관리</td><td>Git Backend 사용</td></tr><tr><td><strong>Gateway</strong></td><td>API 라우팅</td><td>Rate Limiting 적용</td></tr><tr><td><strong>Circuit Breaker</strong></td><td>장애 전파 방지</td><td>Hystrix → Resilience4j</td></tr></tbody></table><h2 id="⚡-성능-튜닝-실전-노하우" tabindex="-1"><a class="header-anchor" href="#⚡-성능-튜닝-실전-노하우"><span>⚡ 성능 튜닝 실전 노하우</span></a></h2><h3 id="jpa-최적화-핵심-포인트" tabindex="-1"><a class="header-anchor" href="#jpa-최적화-핵심-포인트"><span>JPA 최적화 핵심 포인트</span></a></h3><div class="hint-container warning"><p class="hint-container-title">N+1 쿼리 문제</p><p>실무에서 가장 빈번하게 발생하는 성능 문제입니다. <code>@EntityGraph</code>나 <code>Fetch Join</code>을 활용하여 해결하세요.</p></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// ❌ N+1 문제 발생</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 각 User마다 추가 쿼리 발생</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ 한 번에 조회</span></span>
<span class="line"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT u FROM User u LEFT JOIN FETCH u.roles&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAllUsersWithRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="커넥션-풀-최적화-설정" tabindex="-1"><a class="header-anchor" href="#커넥션-풀-최적화-설정"><span>커넥션 풀 최적화 설정</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token comment"># 실무에서 검증된 HikariCP 설정</span></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">datasource</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">hikari</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">20</span></span>
<span class="line">      <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5</span></span>
<span class="line">      <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">300000</span></span>
<span class="line">      <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000</span></span>
<span class="line">      <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> SELECT 1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎯-실무-트러블슈팅-케이스" tabindex="-1"><a class="header-anchor" href="#🎯-실무-트러블슈팅-케이스"><span>🎯 실무 트러블슈팅 케이스</span></a></h2><h3 id="case-1-memory-leak-해결" tabindex="-1"><a class="header-anchor" href="#case-1-memory-leak-해결"><span>Case 1: Memory Leak 해결</span></a></h3><p><strong>문제</strong>: 장시간 운영 시 메모리 사용량이 계속 증가<br><strong>원인</strong>: Connection Pool에서 커넥션이 반환되지 않음<br><strong>해결</strong>: <code>@Transactional</code> 범위 최적화 및 예외 처리 개선</p><h3 id="case-2-동시성-문제" tabindex="-1"><a class="header-anchor" href="#case-2-동시성-문제"><span>Case 2: 동시성 문제</span></a></h3><p><strong>문제</strong>: 다중 스레드 환경에서 데이터 정합성 이슈<br><strong>원인</strong>: Singleton Bean에서 인스턴스 변수 사용<br><strong>해결</strong>: ThreadLocal 또는 Stateless 설계로 전환</p><h3 id="case-3-빌드-성능-최적화" tabindex="-1"><a class="header-anchor" href="#case-3-빌드-성능-최적화"><span>Case 3: 빌드 성능 최적화</span></a></h3><p><strong>문제</strong>: 테스트 실행 시간 과다 (25분)<br><strong>원인</strong>: 전체 ApplicationContext 로딩<br><strong>해결</strong>: <code>@WebMvcTest</code>, <code>@DataJpaTest</code> 등 슬라이스 테스트 활용</p><h2 id="📚-지속적-학습-로드맵" tabindex="-1"><a class="header-anchor" href="#📚-지속적-학습-로드맵"><span>📚 지속적 학습 로드맵</span></a></h2><h3 id="현재-집중-학습-영역" tabindex="-1"><a class="header-anchor" href="#현재-집중-학습-영역"><span>현재 집중 학습 영역</span></a></h3><ul><li><strong>Spring Native</strong>: GraalVM 기반 네이티브 이미지</li><li><strong>WebFlux</strong>: 리액티브 프로그래밍 패러다임</li><li><strong>Spring AI</strong>: LLM 통합 프레임워크</li><li><strong>Virtual Threads</strong>: Project Loom 활용</li></ul><h3 id="실무-적용-예정-기술" tabindex="-1"><a class="header-anchor" href="#실무-적용-예정-기술"><span>실무 적용 예정 기술</span></a></h3><ul><li><strong>R2DBC</strong>: 비동기 데이터베이스 액세스</li><li><strong>GraphQL</strong>: 유연한 API 설계</li><li><strong>Testcontainers</strong>: 통합 테스트 환경 개선</li></ul><hr><blockquote><p><strong>&quot;10년간의 Spring 경험을 통해 배운 것은, 프레임워크는 도구일 뿐이고 진짜 중요한 건 비즈니스 문제를 해결하는 것이라는 점입니다.&quot;</strong></p></blockquote>`,27))])}const k=r(c,[["render",g]]),v=JSON.parse('{"path":"/notes/spring/","title":"🍃 Spring Framework","lang":"ko-KR","frontmatter":{},"headers":[{"level":2,"title":"📋 실무 경험 기반 목차","slug":"📋-실무-경험-기반-목차","link":"#📋-실무-경험-기반-목차","children":[{"level":3,"title":"🏗️ Spring Core & 아키텍처 설계","slug":"🏗️-spring-core-아키텍처-설계","link":"#🏗️-spring-core-아키텍처-설계","children":[]},{"level":3,"title":"🚀 Spring Boot 실전 활용","slug":"🚀-spring-boot-실전-활용","link":"#🚀-spring-boot-실전-활용","children":[]},{"level":3,"title":"🌐 Spring Cloud & MSA","slug":"🌐-spring-cloud-msa","link":"#🌐-spring-cloud-msa","children":[]},{"level":3,"title":"🔐 Spring Security 심화","slug":"🔐-spring-security-심화","link":"#🔐-spring-security-심화","children":[]},{"level":3,"title":"📊 Spring Data & 성능 최적화","slug":"📊-spring-data-성능-최적화","link":"#📊-spring-data-성능-최적화","children":[]}]},{"level":2,"title":"🏗️ 실무 프로젝트별 Spring 활용 경험","slug":"🏗️-실무-프로젝트별-spring-활용-경험","link":"#🏗️-실무-프로젝트별-spring-활용-경험","children":[]},{"level":2,"title":"📊 실무에서 검증된 Spring 패턴","slug":"📊-실무에서-검증된-spring-패턴","link":"#📊-실무에서-검증된-spring-패턴","children":[{"level":3,"title":"성능 최적화 경험","slug":"성능-최적화-경험","link":"#성능-최적화-경험","children":[]},{"level":3,"title":"아키텍처 패턴 적용 경험","slug":"아키텍처-패턴-적용-경험","link":"#아키텍처-패턴-적용-경험","children":[]}]},{"level":2,"title":"🔧 실무 개발 가이드","slug":"🔧-실무-개발-가이드","link":"#🔧-실무-개발-가이드","children":[{"level":3,"title":"1. 프로젝트 초기 설정 체크리스트","slug":"_1-프로젝트-초기-설정-체크리스트","link":"#_1-프로젝트-초기-설정-체크리스트","children":[]},{"level":3,"title":"2. 공통 라이브러리 필수 요소","slug":"_2-공통-라이브러리-필수-요소","link":"#_2-공통-라이브러리-필수-요소","children":[]},{"level":3,"title":"3. MSA 환경 필수 구성","slug":"_3-msa-환경-필수-구성","link":"#_3-msa-환경-필수-구성","children":[]}]},{"level":2,"title":"⚡ 성능 튜닝 실전 노하우","slug":"⚡-성능-튜닝-실전-노하우","link":"#⚡-성능-튜닝-실전-노하우","children":[{"level":3,"title":"JPA 최적화 핵심 포인트","slug":"jpa-최적화-핵심-포인트","link":"#jpa-최적화-핵심-포인트","children":[]},{"level":3,"title":"커넥션 풀 최적화 설정","slug":"커넥션-풀-최적화-설정","link":"#커넥션-풀-최적화-설정","children":[]}]},{"level":2,"title":"🎯 실무 트러블슈팅 케이스","slug":"🎯-실무-트러블슈팅-케이스","link":"#🎯-실무-트러블슈팅-케이스","children":[{"level":3,"title":"Case 1: Memory Leak 해결","slug":"case-1-memory-leak-해결","link":"#case-1-memory-leak-해결","children":[]},{"level":3,"title":"Case 2: 동시성 문제","slug":"case-2-동시성-문제","link":"#case-2-동시성-문제","children":[]},{"level":3,"title":"Case 3: 빌드 성능 최적화","slug":"case-3-빌드-성능-최적화","link":"#case-3-빌드-성능-최적화","children":[]}]},{"level":2,"title":"📚 지속적 학습 로드맵","slug":"📚-지속적-학습-로드맵","link":"#📚-지속적-학습-로드맵","children":[{"level":3,"title":"현재 집중 학습 영역","slug":"현재-집중-학습-영역","link":"#현재-집중-학습-영역","children":[]},{"level":3,"title":"실무 적용 예정 기술","slug":"실무-적용-예정-기술","link":"#실무-적용-예정-기술","children":[]}]}],"git":{"updatedTime":1753245441000,"contributors":[{"name":"byounghoonmoon","username":"byounghoonmoon","email":"passion.mbh@gmail.com","commits":1,"url":"https://github.com/byounghoonmoon"}],"changelog":[{"hash":"c6c756b87bac92db7df2e9d3758e26e214f23fba","time":1753245441000,"email":"passion.mbh@gmail.com","author":"byounghoonmoon","message":"first commit"}]},"filePathRelative":"notes/spring/README.md"}');export{k as comp,v as data};
